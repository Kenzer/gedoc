// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ged.web;

import ged.domain.documentos.PastaPropriedades;
import ged.domain.documentos.TipoDados;
import ged.web.TipoDadosController;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TipoDadosController_Roo_ManagedBean {
    
    declare @type: TipoDadosController: @ManagedBean(name = "tipoDadosController");
    
    declare @type: TipoDadosController: @SessionScoped;
    
    private String TipoDadosController.name = "TipoDadoses";
    
    private TipoDados TipoDadosController.tipoDados;
    
    private List<TipoDados> TipoDadosController.allTipoDadoses;
    
    private boolean TipoDadosController.dataVisible = false;
    
    private List<String> TipoDadosController.columns;
    
    private HtmlPanelGrid TipoDadosController.createPanelGrid;
    
    private HtmlPanelGrid TipoDadosController.editPanelGrid;
    
    private HtmlPanelGrid TipoDadosController.viewPanelGrid;
    
    private boolean TipoDadosController.createDialogVisible = false;
    
    private List<PastaPropriedades> TipoDadosController.selectedPastaPropriedadeses;
    
    @PostConstruct
    public void TipoDadosController.init() {
        columns = new ArrayList<String>();
        columns.add("descricao");
        columns.add("stringFormat");
    }
    
    public String TipoDadosController.getName() {
        return name;
    }
    
    public List<String> TipoDadosController.getColumns() {
        return columns;
    }
    
    public List<TipoDados> TipoDadosController.getAllTipoDadoses() {
        return allTipoDadoses;
    }
    
    public void TipoDadosController.setAllTipoDadoses(List<TipoDados> allTipoDadoses) {
        this.allTipoDadoses = allTipoDadoses;
    }
    
    public String TipoDadosController.findAllTipoDadoses() {
        allTipoDadoses = TipoDados.findAllTipoDadoses();
        dataVisible = !allTipoDadoses.isEmpty();
        return null;
    }
    
    public boolean TipoDadosController.isDataVisible() {
        return dataVisible;
    }
    
    public void TipoDadosController.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TipoDadosController.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TipoDadosController.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TipoDadosController.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TipoDadosController.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TipoDadosController.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TipoDadosController.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TipoDadosController.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentoPropriedadesesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentoPropriedadesesCreateOutput.setId("documentoPropriedadesesCreateOutput");
        documentoPropriedadesesCreateOutput.setValue("Documento Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(documentoPropriedadesesCreateOutput);
        
        InputText documentoPropriedadesesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        documentoPropriedadesesCreateInput.setId("documentoPropriedadesesCreateInput");
        documentoPropriedadesesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.documentoPropriedadeses}", Set.class));
        documentoPropriedadesesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentoPropriedadesesCreateInput);
        
        Message documentoPropriedadesesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentoPropriedadesesCreateInputMessage.setId("documentoPropriedadesesCreateInputMessage");
        documentoPropriedadesesCreateInputMessage.setFor("documentoPropriedadesesCreateInput");
        documentoPropriedadesesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentoPropriedadesesCreateInputMessage);
        
        HtmlOutputText pastaPropriedadesesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesCreateOutput.setId("pastaPropriedadesesCreateOutput");
        pastaPropriedadesesCreateOutput.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateOutput);
        
        HtmlOutputText pastaPropriedadesesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesCreateInput.setId("pastaPropriedadesesCreateInput");
        pastaPropriedadesesCreateInput.setValue("This relationship is managed from the PastaPropriedades side");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateInput);
        
        Message pastaPropriedadesesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaPropriedadesesCreateInputMessage.setId("pastaPropriedadesesCreateInputMessage");
        pastaPropriedadesesCreateInputMessage.setFor("pastaPropriedadesesCreateInput");
        pastaPropriedadesesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateInputMessage);
        
        HtmlOutputText descricaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputTextarea descricaoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.descricao}", String.class));
        LengthValidator descricaoCreateInputValidator = new LengthValidator();
        descricaoCreateInputValidator.setMaximum(70);
        descricaoCreateInput.addValidator(descricaoCreateInputValidator);
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        HtmlOutputText stringFormatCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        stringFormatCreateOutput.setId("stringFormatCreateOutput");
        stringFormatCreateOutput.setValue("String Format: * ");
        htmlPanelGrid.getChildren().add(stringFormatCreateOutput);
        
        InputTextarea stringFormatCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        stringFormatCreateInput.setId("stringFormatCreateInput");
        stringFormatCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.stringFormat}", String.class));
        LengthValidator stringFormatCreateInputValidator = new LengthValidator();
        stringFormatCreateInputValidator.setMaximum(50);
        stringFormatCreateInput.addValidator(stringFormatCreateInputValidator);
        stringFormatCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(stringFormatCreateInput);
        
        Message stringFormatCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        stringFormatCreateInputMessage.setId("stringFormatCreateInputMessage");
        stringFormatCreateInputMessage.setFor("stringFormatCreateInput");
        stringFormatCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(stringFormatCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoDadosController.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentoPropriedadesesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentoPropriedadesesEditOutput.setId("documentoPropriedadesesEditOutput");
        documentoPropriedadesesEditOutput.setValue("Documento Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(documentoPropriedadesesEditOutput);
        
        InputText documentoPropriedadesesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        documentoPropriedadesesEditInput.setId("documentoPropriedadesesEditInput");
        documentoPropriedadesesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.documentoPropriedadeses}", Set.class));
        documentoPropriedadesesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentoPropriedadesesEditInput);
        
        Message documentoPropriedadesesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentoPropriedadesesEditInputMessage.setId("documentoPropriedadesesEditInputMessage");
        documentoPropriedadesesEditInputMessage.setFor("documentoPropriedadesesEditInput");
        documentoPropriedadesesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentoPropriedadesesEditInputMessage);
        
        HtmlOutputText pastaPropriedadesesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesEditOutput.setId("pastaPropriedadesesEditOutput");
        pastaPropriedadesesEditOutput.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditOutput);
        
        HtmlOutputText pastaPropriedadesesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesEditInput.setId("pastaPropriedadesesEditInput");
        pastaPropriedadesesEditInput.setValue("This relationship is managed from the PastaPropriedades side");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditInput);
        
        Message pastaPropriedadesesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaPropriedadesesEditInputMessage.setId("pastaPropriedadesesEditInputMessage");
        pastaPropriedadesesEditInputMessage.setFor("pastaPropriedadesesEditInput");
        pastaPropriedadesesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditInputMessage);
        
        HtmlOutputText descricaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputTextarea descricaoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.descricao}", String.class));
        LengthValidator descricaoEditInputValidator = new LengthValidator();
        descricaoEditInputValidator.setMaximum(70);
        descricaoEditInput.addValidator(descricaoEditInputValidator);
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        HtmlOutputText stringFormatEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        stringFormatEditOutput.setId("stringFormatEditOutput");
        stringFormatEditOutput.setValue("String Format: * ");
        htmlPanelGrid.getChildren().add(stringFormatEditOutput);
        
        InputTextarea stringFormatEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        stringFormatEditInput.setId("stringFormatEditInput");
        stringFormatEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.stringFormat}", String.class));
        LengthValidator stringFormatEditInputValidator = new LengthValidator();
        stringFormatEditInputValidator.setMaximum(50);
        stringFormatEditInput.addValidator(stringFormatEditInputValidator);
        stringFormatEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(stringFormatEditInput);
        
        Message stringFormatEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        stringFormatEditInputMessage.setId("stringFormatEditInputMessage");
        stringFormatEditInputMessage.setFor("stringFormatEditInput");
        stringFormatEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(stringFormatEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoDadosController.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentoPropriedadesesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentoPropriedadesesLabel.setId("documentoPropriedadesesLabel");
        documentoPropriedadesesLabel.setValue("Documento Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(documentoPropriedadesesLabel);
        
        HtmlOutputText documentoPropriedadesesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentoPropriedadesesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.documentoPropriedadeses}", String.class));
        htmlPanelGrid.getChildren().add(documentoPropriedadesesValue);
        
        HtmlOutputText pastaPropriedadesesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesLabel.setId("pastaPropriedadesesLabel");
        pastaPropriedadesesLabel.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesLabel);
        
        HtmlOutputText pastaPropriedadesesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesValue.setId("pastaPropriedadesesValue");
        pastaPropriedadesesValue.setValue("This relationship is managed from the PastaPropriedades side");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:   ");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        InputTextarea descricaoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.descricao}", String.class));
        descricaoValue.setReadonly(true);
        descricaoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        HtmlOutputText stringFormatLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        stringFormatLabel.setId("stringFormatLabel");
        stringFormatLabel.setValue("String Format:   ");
        htmlPanelGrid.getChildren().add(stringFormatLabel);
        
        InputTextarea stringFormatValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        stringFormatValue.setId("stringFormatValue");
        stringFormatValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDadosController.tipoDados.stringFormat}", String.class));
        stringFormatValue.setReadonly(true);
        stringFormatValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(stringFormatValue);
        
        return htmlPanelGrid;
    }
    
    public TipoDados TipoDadosController.getTipoDados() {
        if (tipoDados == null) {
            tipoDados = new TipoDados();
        }
        return tipoDados;
    }
    
    public void TipoDadosController.setTipoDados(TipoDados tipoDados) {
        this.tipoDados = tipoDados;
    }
    
    public List<PastaPropriedades> TipoDadosController.getSelectedPastaPropriedadeses() {
        return selectedPastaPropriedadeses;
    }
    
    public void TipoDadosController.setSelectedPastaPropriedadeses(List<PastaPropriedades> selectedPastaPropriedadeses) {
        if (selectedPastaPropriedadeses != null) {
            tipoDados.setPastaPropriedadeses(new HashSet<PastaPropriedades>(selectedPastaPropriedadeses));
        }
        this.selectedPastaPropriedadeses = selectedPastaPropriedadeses;
    }
    
    public String TipoDadosController.onEdit() {
        if (tipoDados != null && tipoDados.getPastaPropriedadeses() != null) {
            selectedPastaPropriedadeses = new ArrayList<PastaPropriedades>(tipoDados.getPastaPropriedadeses());
        }
        return null;
    }
    
    public boolean TipoDadosController.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TipoDadosController.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TipoDadosController.displayList() {
        createDialogVisible = false;
        findAllTipoDadoses();
        return "tipoDados";
    }
    
    public String TipoDadosController.displayCreateDialog() {
        tipoDados = new TipoDados();
        createDialogVisible = true;
        return "tipoDados";
    }
    
    public String TipoDadosController.persist() {
        String message = "";
        if (tipoDados.getId() != null) {
            tipoDados.merge();
            message = "Successfully updated";
        } else {
            tipoDados.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoDadoses();
    }
    
    public String TipoDadosController.delete() {
        tipoDados.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoDadoses();
    }
    
    public void TipoDadosController.reset() {
        tipoDados = null;
        selectedPastaPropriedadeses = null;
        createDialogVisible = false;
    }
    
    public void TipoDadosController.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
