// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ged.web;

import ged.domain.documentos.PastaGrupo;
import ged.domain.documentos.PastaPropriedades;
import ged.domain.documentos.TipoDados;
import ged.web.PastaPropriedadesController;
import ged.web.converter.PastaGrupoConverter;
import ged.web.converter.TipoDadosConverter;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PastaPropriedadesController_Roo_ManagedBean {
    
    declare @type: PastaPropriedadesController: @ManagedBean(name = "pastaPropriedadesController");
    
    declare @type: PastaPropriedadesController: @SessionScoped;
    
    private String PastaPropriedadesController.name = "PastaPropriedadeses";
    
    private PastaPropriedades PastaPropriedadesController.pastaPropriedades;
    
    private List<PastaPropriedades> PastaPropriedadesController.allPastaPropriedadeses;
    
    private boolean PastaPropriedadesController.dataVisible = false;
    
    private List<String> PastaPropriedadesController.columns;
    
    private HtmlPanelGrid PastaPropriedadesController.createPanelGrid;
    
    private HtmlPanelGrid PastaPropriedadesController.editPanelGrid;
    
    private HtmlPanelGrid PastaPropriedadesController.viewPanelGrid;
    
    private boolean PastaPropriedadesController.createDialogVisible = false;
    
    @PostConstruct
    public void PastaPropriedadesController.init() {
        columns = new ArrayList<String>();
        columns.add("descricao");
    }
    
    public String PastaPropriedadesController.getName() {
        return name;
    }
    
    public List<String> PastaPropriedadesController.getColumns() {
        return columns;
    }
    
    public List<PastaPropriedades> PastaPropriedadesController.getAllPastaPropriedadeses() {
        return allPastaPropriedadeses;
    }
    
    public void PastaPropriedadesController.setAllPastaPropriedadeses(List<PastaPropriedades> allPastaPropriedadeses) {
        this.allPastaPropriedadeses = allPastaPropriedadeses;
    }
    
    public String PastaPropriedadesController.findAllPastaPropriedadeses() {
        allPastaPropriedadeses = PastaPropriedades.findAllPastaPropriedadeses();
        dataVisible = !allPastaPropriedadeses.isEmpty();
        return null;
    }
    
    public boolean PastaPropriedadesController.isDataVisible() {
        return dataVisible;
    }
    
    public void PastaPropriedadesController.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PastaPropriedadesController.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PastaPropriedadesController.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PastaPropriedadesController.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaDetalhesesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesCreateOutput.setId("pastaDetalhesesCreateOutput");
        pastaDetalhesesCreateOutput.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateOutput);
        
        InputText pastaDetalhesesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaDetalhesesCreateInput.setId("pastaDetalhesesCreateInput");
        pastaDetalhesesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pastaDetalheses}", Set.class));
        pastaDetalhesesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateInput);
        
        Message pastaDetalhesesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaDetalhesesCreateInputMessage.setId("pastaDetalhesesCreateInputMessage");
        pastaDetalhesesCreateInputMessage.setFor("pastaDetalhesesCreateInput");
        pastaDetalhesesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateInputMessage);
        
        HtmlOutputText grupoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoCreateOutput.setId("grupoCreateOutput");
        grupoCreateOutput.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoCreateOutput);
        
        AutoComplete grupoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoCreateInput.setId("grupoCreateInput");
        grupoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.grupo}", PastaGrupo.class));
        grupoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastaPropriedadesController.completeGrupo}", List.class, new Class[] { String.class }));
        grupoCreateInput.setDropdown(true);
        grupoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "grupo", String.class));
        grupoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{grupo.descricao}", String.class));
        grupoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{grupo}", PastaGrupo.class));
        grupoCreateInput.setConverter(new PastaGrupoConverter());
        grupoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(grupoCreateInput);
        
        Message grupoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoCreateInputMessage.setId("grupoCreateInputMessage");
        grupoCreateInputMessage.setFor("grupoCreateInput");
        grupoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoCreateInputMessage);
        
        HtmlOutputText tipoDadoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDadoCreateOutput.setId("tipoDadoCreateOutput");
        tipoDadoCreateOutput.setValue("Tipo Dado:   ");
        htmlPanelGrid.getChildren().add(tipoDadoCreateOutput);
        
        AutoComplete tipoDadoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoDadoCreateInput.setId("tipoDadoCreateInput");
        tipoDadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.tipoDado}", TipoDados.class));
        tipoDadoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastaPropriedadesController.completeTipoDado}", List.class, new Class[] { String.class }));
        tipoDadoCreateInput.setDropdown(true);
        tipoDadoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoDado", String.class));
        tipoDadoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoDado.descricao} #{tipoDado.stringFormat}", String.class));
        tipoDadoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoDado}", TipoDados.class));
        tipoDadoCreateInput.setConverter(new TipoDadosConverter());
        tipoDadoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoDadoCreateInput);
        
        Message tipoDadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoDadoCreateInputMessage.setId("tipoDadoCreateInputMessage");
        tipoDadoCreateInputMessage.setFor("tipoDadoCreateInput");
        tipoDadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoDadoCreateInputMessage);
        
        HtmlOutputText descricaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputTextarea descricaoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.descricao}", String.class));
        LengthValidator descricaoCreateInputValidator = new LengthValidator();
        descricaoCreateInputValidator.setMaximum(70);
        descricaoCreateInput.addValidator(descricaoCreateInputValidator);
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        HtmlOutputText etiquetaCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etiquetaCreateOutput.setId("etiquetaCreateOutput");
        etiquetaCreateOutput.setValue("Etiqueta: * ");
        htmlPanelGrid.getChildren().add(etiquetaCreateOutput);
        
        SelectBooleanCheckbox etiquetaCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        etiquetaCreateInput.setId("etiquetaCreateInput");
        etiquetaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.etiqueta}", Boolean.class));
        etiquetaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(etiquetaCreateInput);
        
        Message etiquetaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        etiquetaCreateInputMessage.setId("etiquetaCreateInputMessage");
        etiquetaCreateInputMessage.setFor("etiquetaCreateInput");
        etiquetaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(etiquetaCreateInputMessage);
        
        HtmlOutputText pesquisaCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pesquisaCreateOutput.setId("pesquisaCreateOutput");
        pesquisaCreateOutput.setValue("Pesquisa: * ");
        htmlPanelGrid.getChildren().add(pesquisaCreateOutput);
        
        SelectBooleanCheckbox pesquisaCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        pesquisaCreateInput.setId("pesquisaCreateInput");
        pesquisaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pesquisa}", Boolean.class));
        pesquisaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pesquisaCreateInput);
        
        Message pesquisaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pesquisaCreateInputMessage.setId("pesquisaCreateInputMessage");
        pesquisaCreateInputMessage.setFor("pesquisaCreateInput");
        pesquisaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pesquisaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaDetalhesesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesEditOutput.setId("pastaDetalhesesEditOutput");
        pastaDetalhesesEditOutput.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditOutput);
        
        InputText pastaDetalhesesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaDetalhesesEditInput.setId("pastaDetalhesesEditInput");
        pastaDetalhesesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pastaDetalheses}", Set.class));
        pastaDetalhesesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditInput);
        
        Message pastaDetalhesesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaDetalhesesEditInputMessage.setId("pastaDetalhesesEditInputMessage");
        pastaDetalhesesEditInputMessage.setFor("pastaDetalhesesEditInput");
        pastaDetalhesesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditInputMessage);
        
        HtmlOutputText grupoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoEditOutput.setId("grupoEditOutput");
        grupoEditOutput.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoEditOutput);
        
        AutoComplete grupoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoEditInput.setId("grupoEditInput");
        grupoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.grupo}", PastaGrupo.class));
        grupoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastaPropriedadesController.completeGrupo}", List.class, new Class[] { String.class }));
        grupoEditInput.setDropdown(true);
        grupoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "grupo", String.class));
        grupoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{grupo.descricao}", String.class));
        grupoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{grupo}", PastaGrupo.class));
        grupoEditInput.setConverter(new PastaGrupoConverter());
        grupoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(grupoEditInput);
        
        Message grupoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoEditInputMessage.setId("grupoEditInputMessage");
        grupoEditInputMessage.setFor("grupoEditInput");
        grupoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoEditInputMessage);
        
        HtmlOutputText tipoDadoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDadoEditOutput.setId("tipoDadoEditOutput");
        tipoDadoEditOutput.setValue("Tipo Dado:   ");
        htmlPanelGrid.getChildren().add(tipoDadoEditOutput);
        
        AutoComplete tipoDadoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoDadoEditInput.setId("tipoDadoEditInput");
        tipoDadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.tipoDado}", TipoDados.class));
        tipoDadoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastaPropriedadesController.completeTipoDado}", List.class, new Class[] { String.class }));
        tipoDadoEditInput.setDropdown(true);
        tipoDadoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoDado", String.class));
        tipoDadoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoDado.descricao} #{tipoDado.stringFormat}", String.class));
        tipoDadoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoDado}", TipoDados.class));
        tipoDadoEditInput.setConverter(new TipoDadosConverter());
        tipoDadoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoDadoEditInput);
        
        Message tipoDadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoDadoEditInputMessage.setId("tipoDadoEditInputMessage");
        tipoDadoEditInputMessage.setFor("tipoDadoEditInput");
        tipoDadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoDadoEditInputMessage);
        
        HtmlOutputText descricaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputTextarea descricaoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.descricao}", String.class));
        LengthValidator descricaoEditInputValidator = new LengthValidator();
        descricaoEditInputValidator.setMaximum(70);
        descricaoEditInput.addValidator(descricaoEditInputValidator);
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        HtmlOutputText etiquetaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etiquetaEditOutput.setId("etiquetaEditOutput");
        etiquetaEditOutput.setValue("Etiqueta: * ");
        htmlPanelGrid.getChildren().add(etiquetaEditOutput);
        
        SelectBooleanCheckbox etiquetaEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        etiquetaEditInput.setId("etiquetaEditInput");
        etiquetaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.etiqueta}", Boolean.class));
        etiquetaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(etiquetaEditInput);
        
        Message etiquetaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        etiquetaEditInputMessage.setId("etiquetaEditInputMessage");
        etiquetaEditInputMessage.setFor("etiquetaEditInput");
        etiquetaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(etiquetaEditInputMessage);
        
        HtmlOutputText pesquisaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pesquisaEditOutput.setId("pesquisaEditOutput");
        pesquisaEditOutput.setValue("Pesquisa: * ");
        htmlPanelGrid.getChildren().add(pesquisaEditOutput);
        
        SelectBooleanCheckbox pesquisaEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        pesquisaEditInput.setId("pesquisaEditInput");
        pesquisaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pesquisa}", Boolean.class));
        pesquisaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(pesquisaEditInput);
        
        Message pesquisaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pesquisaEditInputMessage.setId("pesquisaEditInputMessage");
        pesquisaEditInputMessage.setFor("pesquisaEditInput");
        pesquisaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pesquisaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastaPropriedadesController.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaDetalhesesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesLabel.setId("pastaDetalhesesLabel");
        pastaDetalhesesLabel.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesLabel);
        
        HtmlOutputText pastaDetalhesesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pastaDetalheses}", String.class));
        htmlPanelGrid.getChildren().add(pastaDetalhesesValue);
        
        HtmlOutputText grupoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoLabel.setId("grupoLabel");
        grupoLabel.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoLabel);
        
        HtmlOutputText grupoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.grupo}", PastaGrupo.class));
        grupoValue.setConverter(new PastaGrupoConverter());
        htmlPanelGrid.getChildren().add(grupoValue);
        
        HtmlOutputText tipoDadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDadoLabel.setId("tipoDadoLabel");
        tipoDadoLabel.setValue("Tipo Dado:   ");
        htmlPanelGrid.getChildren().add(tipoDadoLabel);
        
        HtmlOutputText tipoDadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.tipoDado}", TipoDados.class));
        tipoDadoValue.setConverter(new TipoDadosConverter());
        htmlPanelGrid.getChildren().add(tipoDadoValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:   ");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        InputTextarea descricaoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.descricao}", String.class));
        descricaoValue.setReadonly(true);
        descricaoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        HtmlOutputText etiquetaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etiquetaLabel.setId("etiquetaLabel");
        etiquetaLabel.setValue("Etiqueta:   ");
        htmlPanelGrid.getChildren().add(etiquetaLabel);
        
        HtmlOutputText etiquetaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        etiquetaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.etiqueta}", String.class));
        htmlPanelGrid.getChildren().add(etiquetaValue);
        
        HtmlOutputText pesquisaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pesquisaLabel.setId("pesquisaLabel");
        pesquisaLabel.setValue("Pesquisa:   ");
        htmlPanelGrid.getChildren().add(pesquisaLabel);
        
        HtmlOutputText pesquisaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pesquisaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaPropriedadesController.pastaPropriedades.pesquisa}", String.class));
        htmlPanelGrid.getChildren().add(pesquisaValue);
        
        return htmlPanelGrid;
    }
    
    public PastaPropriedades PastaPropriedadesController.getPastaPropriedades() {
        if (pastaPropriedades == null) {
            pastaPropriedades = new PastaPropriedades();
        }
        return pastaPropriedades;
    }
    
    public void PastaPropriedadesController.setPastaPropriedades(PastaPropriedades pastaPropriedades) {
        this.pastaPropriedades = pastaPropriedades;
    }
    
    public List<PastaGrupo> PastaPropriedadesController.completeGrupo(String query) {
        List<PastaGrupo> suggestions = new ArrayList<PastaGrupo>();
        for (PastaGrupo pastaGrupo : PastaGrupo.findAllPastaGrupoes()) {
            String pastaGrupoStr = String.valueOf(pastaGrupo.getDescricao());
            if (pastaGrupoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pastaGrupo);
            }
        }
        return suggestions;
    }
    
    public List<TipoDados> PastaPropriedadesController.completeTipoDado(String query) {
        List<TipoDados> suggestions = new ArrayList<TipoDados>();
        for (TipoDados tipoDados : TipoDados.findAllTipoDadoses()) {
            String tipoDadosStr = String.valueOf(tipoDados.getDescricao() +  " "  + tipoDados.getStringFormat());
            if (tipoDadosStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoDados);
            }
        }
        return suggestions;
    }
    
    public String PastaPropriedadesController.onEdit() {
        return null;
    }
    
    public boolean PastaPropriedadesController.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PastaPropriedadesController.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PastaPropriedadesController.displayList() {
        createDialogVisible = false;
        findAllPastaPropriedadeses();
        return "pastaPropriedades";
    }
    
    public String PastaPropriedadesController.displayCreateDialog() {
        pastaPropriedades = new PastaPropriedades();
        createDialogVisible = true;
        return "pastaPropriedades";
    }
    
    public String PastaPropriedadesController.persist() {
        String message = "";
        if (pastaPropriedades.getId() != null) {
            pastaPropriedades.merge();
            message = "Successfully updated";
        } else {
            pastaPropriedades.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastaPropriedadeses();
    }
    
    public String PastaPropriedadesController.delete() {
        pastaPropriedades.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastaPropriedadeses();
    }
    
    public void PastaPropriedadesController.reset() {
        pastaPropriedades = null;
        createDialogVisible = false;
    }
    
    public void PastaPropriedadesController.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
