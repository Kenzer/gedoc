// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ged.web;

import ged.domain.documentos.PastaGrupo;
import ged.domain.documentos.Pastas;
import ged.web.PastaGrupoController;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PastaGrupoController_Roo_ManagedBean {
    
    declare @type: PastaGrupoController: @ManagedBean(name = "pastaGrupoController");
    
    declare @type: PastaGrupoController: @SessionScoped;
    
    private String PastaGrupoController.name = "PastaGrupoes";
    
    private PastaGrupo PastaGrupoController.pastaGrupo;
    
    private List<PastaGrupo> PastaGrupoController.allPastaGrupoes;
    
    private boolean PastaGrupoController.dataVisible = false;
    
    private List<String> PastaGrupoController.columns;
    
    private HtmlPanelGrid PastaGrupoController.createPanelGrid;
    
    private HtmlPanelGrid PastaGrupoController.editPanelGrid;
    
    private HtmlPanelGrid PastaGrupoController.viewPanelGrid;
    
    private boolean PastaGrupoController.createDialogVisible = false;
    
    private List<Pastas> PastaGrupoController.selectedPastass;
    
    @PostConstruct
    public void PastaGrupoController.init() {
        columns = new ArrayList<String>();
        columns.add("descricao");
    }
    
    public String PastaGrupoController.getName() {
        return name;
    }
    
    public List<String> PastaGrupoController.getColumns() {
        return columns;
    }
    
    public List<PastaGrupo> PastaGrupoController.getAllPastaGrupoes() {
        return allPastaGrupoes;
    }
    
    public void PastaGrupoController.setAllPastaGrupoes(List<PastaGrupo> allPastaGrupoes) {
        this.allPastaGrupoes = allPastaGrupoes;
    }
    
    public String PastaGrupoController.findAllPastaGrupoes() {
        allPastaGrupoes = PastaGrupo.findAllPastaGrupoes();
        dataVisible = !allPastaGrupoes.isEmpty();
        return null;
    }
    
    public boolean PastaGrupoController.isDataVisible() {
        return dataVisible;
    }
    
    public void PastaGrupoController.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PastaGrupoController.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PastaGrupoController.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PastaGrupoController.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PastaGrupoController.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PastaGrupoController.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PastaGrupoController.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PastaGrupoController.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaPropriedadesesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesCreateOutput.setId("pastaPropriedadesesCreateOutput");
        pastaPropriedadesesCreateOutput.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateOutput);
        
        InputText pastaPropriedadesesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaPropriedadesesCreateInput.setId("pastaPropriedadesesCreateInput");
        pastaPropriedadesesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.pastaPropriedadeses}", Set.class));
        pastaPropriedadesesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateInput);
        
        Message pastaPropriedadesesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaPropriedadesesCreateInputMessage.setId("pastaPropriedadesesCreateInputMessage");
        pastaPropriedadesesCreateInputMessage.setFor("pastaPropriedadesesCreateInput");
        pastaPropriedadesesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesCreateInputMessage);
        
        HtmlOutputText pastassCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassCreateOutput.setId("pastassCreateOutput");
        pastassCreateOutput.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassCreateOutput);
        
        HtmlOutputText pastassCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassCreateInput.setId("pastassCreateInput");
        pastassCreateInput.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassCreateInput);
        
        Message pastassCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastassCreateInputMessage.setId("pastassCreateInputMessage");
        pastassCreateInputMessage.setFor("pastassCreateInput");
        pastassCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastassCreateInputMessage);
        
        HtmlOutputText descricaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputTextarea descricaoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.descricao}", String.class));
        LengthValidator descricaoCreateInputValidator = new LengthValidator();
        descricaoCreateInputValidator.setMaximum(70);
        descricaoCreateInput.addValidator(descricaoCreateInputValidator);
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastaGrupoController.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaPropriedadesesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesEditOutput.setId("pastaPropriedadesesEditOutput");
        pastaPropriedadesesEditOutput.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditOutput);
        
        InputText pastaPropriedadesesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaPropriedadesesEditInput.setId("pastaPropriedadesesEditInput");
        pastaPropriedadesesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.pastaPropriedadeses}", Set.class));
        pastaPropriedadesesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditInput);
        
        Message pastaPropriedadesesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaPropriedadesesEditInputMessage.setId("pastaPropriedadesesEditInputMessage");
        pastaPropriedadesesEditInputMessage.setFor("pastaPropriedadesesEditInput");
        pastaPropriedadesesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesEditInputMessage);
        
        HtmlOutputText pastassEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassEditOutput.setId("pastassEditOutput");
        pastassEditOutput.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassEditOutput);
        
        HtmlOutputText pastassEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassEditInput.setId("pastassEditInput");
        pastassEditInput.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassEditInput);
        
        Message pastassEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastassEditInputMessage.setId("pastassEditInputMessage");
        pastassEditInputMessage.setFor("pastassEditInput");
        pastassEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastassEditInputMessage);
        
        HtmlOutputText descricaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputTextarea descricaoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.descricao}", String.class));
        LengthValidator descricaoEditInputValidator = new LengthValidator();
        descricaoEditInputValidator.setMaximum(70);
        descricaoEditInput.addValidator(descricaoEditInputValidator);
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastaGrupoController.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pastaPropriedadesesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesLabel.setId("pastaPropriedadesesLabel");
        pastaPropriedadesesLabel.setValue("Pasta Propriedadeses:   ");
        htmlPanelGrid.getChildren().add(pastaPropriedadesesLabel);
        
        HtmlOutputText pastaPropriedadesesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaPropriedadesesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.pastaPropriedadeses}", String.class));
        htmlPanelGrid.getChildren().add(pastaPropriedadesesValue);
        
        HtmlOutputText pastassLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassLabel.setId("pastassLabel");
        pastassLabel.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassLabel);
        
        HtmlOutputText pastassValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassValue.setId("pastassValue");
        pastassValue.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:   ");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        InputTextarea descricaoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastaGrupoController.pastaGrupo.descricao}", String.class));
        descricaoValue.setReadonly(true);
        descricaoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        return htmlPanelGrid;
    }
    
    public PastaGrupo PastaGrupoController.getPastaGrupo() {
        if (pastaGrupo == null) {
            pastaGrupo = new PastaGrupo();
        }
        return pastaGrupo;
    }
    
    public void PastaGrupoController.setPastaGrupo(PastaGrupo pastaGrupo) {
        this.pastaGrupo = pastaGrupo;
    }
    
    public List<Pastas> PastaGrupoController.getSelectedPastass() {
        return selectedPastass;
    }
    
    public void PastaGrupoController.setSelectedPastass(List<Pastas> selectedPastass) {
        if (selectedPastass != null) {
            pastaGrupo.setPastass(new HashSet<Pastas>(selectedPastass));
        }
        this.selectedPastass = selectedPastass;
    }
    
    public String PastaGrupoController.onEdit() {
        if (pastaGrupo != null && pastaGrupo.getPastass() != null) {
            selectedPastass = new ArrayList<Pastas>(pastaGrupo.getPastass());
        }
        return null;
    }
    
    public boolean PastaGrupoController.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PastaGrupoController.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PastaGrupoController.displayList() {
        createDialogVisible = false;
        findAllPastaGrupoes();
        return "pastaGrupo";
    }
    
    public String PastaGrupoController.displayCreateDialog() {
        pastaGrupo = new PastaGrupo();
        createDialogVisible = true;
        return "pastaGrupo";
    }
    
    public String PastaGrupoController.persist() {
        String message = "";
        if (pastaGrupo.getId() != null) {
            pastaGrupo.merge();
            message = "Successfully updated";
        } else {
            pastaGrupo.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastaGrupoes();
    }
    
    public String PastaGrupoController.delete() {
        pastaGrupo.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastaGrupoes();
    }
    
    public void PastaGrupoController.reset() {
        pastaGrupo = null;
        selectedPastass = null;
        createDialogVisible = false;
    }
    
    public void PastaGrupoController.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
