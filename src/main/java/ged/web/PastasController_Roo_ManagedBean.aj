// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ged.web;

import ged.domain.documentos.Localizador;
import ged.domain.documentos.PastaGrupo;
import ged.domain.documentos.Pastas;
import ged.web.PastasController;
import ged.web.converter.LocalizadorConverter;
import ged.web.converter.PastaGrupoConverter;
import ged.web.converter.PastasConverter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PastasController_Roo_ManagedBean {
    
    declare @type: PastasController: @ManagedBean(name = "pastasController");
    
    declare @type: PastasController: @SessionScoped;
    
    private String PastasController.name = "Pastases";
    
    private Pastas PastasController.pastas;
    
    private List<Pastas> PastasController.allPastases;
    
    private boolean PastasController.dataVisible = false;
    
    private List<String> PastasController.columns;
    
    private HtmlPanelGrid PastasController.createPanelGrid;
    
    private HtmlPanelGrid PastasController.editPanelGrid;
    
    private HtmlPanelGrid PastasController.viewPanelGrid;
    
    private boolean PastasController.createDialogVisible = false;
    
    private List<Pastas> PastasController.selectedPastass;
    
    @PostConstruct
    public void PastasController.init() {
        columns = new ArrayList<String>();
        columns.add("descricao");
    }
    
    public String PastasController.getName() {
        return name;
    }
    
    public List<String> PastasController.getColumns() {
        return columns;
    }
    
    public List<Pastas> PastasController.getAllPastases() {
        return allPastases;
    }
    
    public void PastasController.setAllPastases(List<Pastas> allPastases) {
        this.allPastases = allPastases;
    }
    
    public String PastasController.findAllPastases() {
        allPastases = Pastas.findAllPastases();
        dataVisible = !allPastases.isEmpty();
        return null;
    }
    
    public boolean PastasController.isDataVisible() {
        return dataVisible;
    }
    
    public void PastasController.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PastasController.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PastasController.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PastasController.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PastasController.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PastasController.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PastasController.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PastasController.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentossCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentossCreateOutput.setId("documentossCreateOutput");
        documentossCreateOutput.setValue("Documentoss:   ");
        htmlPanelGrid.getChildren().add(documentossCreateOutput);
        
        InputText documentossCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        documentossCreateInput.setId("documentossCreateInput");
        documentossCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.documentoss}", Set.class));
        documentossCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentossCreateInput);
        
        Message documentossCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentossCreateInputMessage.setId("documentossCreateInputMessage");
        documentossCreateInputMessage.setFor("documentossCreateInput");
        documentossCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentossCreateInputMessage);
        
        HtmlOutputText pastaDetalhesesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesCreateOutput.setId("pastaDetalhesesCreateOutput");
        pastaDetalhesesCreateOutput.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateOutput);
        
        InputText pastaDetalhesesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaDetalhesesCreateInput.setId("pastaDetalhesesCreateInput");
        pastaDetalhesesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaDetalheses}", Set.class));
        pastaDetalhesesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateInput);
        
        Message pastaDetalhesesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaDetalhesesCreateInputMessage.setId("pastaDetalhesesCreateInputMessage");
        pastaDetalhesesCreateInputMessage.setFor("pastaDetalhesesCreateInput");
        pastaDetalhesesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaDetalhesesCreateInputMessage);
        
        HtmlOutputText pastaRetiradasCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaRetiradasCreateOutput.setId("pastaRetiradasCreateOutput");
        pastaRetiradasCreateOutput.setValue("Pasta Retiradas:   ");
        htmlPanelGrid.getChildren().add(pastaRetiradasCreateOutput);
        
        InputText pastaRetiradasCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaRetiradasCreateInput.setId("pastaRetiradasCreateInput");
        pastaRetiradasCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaRetiradas}", Set.class));
        pastaRetiradasCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaRetiradasCreateInput);
        
        Message pastaRetiradasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaRetiradasCreateInputMessage.setId("pastaRetiradasCreateInputMessage");
        pastaRetiradasCreateInputMessage.setFor("pastaRetiradasCreateInput");
        pastaRetiradasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaRetiradasCreateInputMessage);
        
        HtmlOutputText pastassCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassCreateOutput.setId("pastassCreateOutput");
        pastassCreateOutput.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassCreateOutput);
        
        HtmlOutputText pastassCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassCreateInput.setId("pastassCreateInput");
        pastassCreateInput.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassCreateInput);
        
        Message pastassCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastassCreateInputMessage.setId("pastassCreateInputMessage");
        pastassCreateInputMessage.setFor("pastassCreateInput");
        pastassCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastassCreateInputMessage);
        
        HtmlOutputText pastasRestricaosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastasRestricaosCreateOutput.setId("pastasRestricaosCreateOutput");
        pastasRestricaosCreateOutput.setValue("Pastas Restricaos:   ");
        htmlPanelGrid.getChildren().add(pastasRestricaosCreateOutput);
        
        InputText pastasRestricaosCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastasRestricaosCreateInput.setId("pastasRestricaosCreateInput");
        pastasRestricaosCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastasRestricaos}", Set.class));
        pastasRestricaosCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastasRestricaosCreateInput);
        
        Message pastasRestricaosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastasRestricaosCreateInputMessage.setId("pastasRestricaosCreateInputMessage");
        pastasRestricaosCreateInputMessage.setFor("pastasRestricaosCreateInput");
        pastasRestricaosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastasRestricaosCreateInputMessage);
        
        HtmlOutputText localizadorCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorCreateOutput.setId("localizadorCreateOutput");
        localizadorCreateOutput.setValue("Localizador:   ");
        htmlPanelGrid.getChildren().add(localizadorCreateOutput);
        
        AutoComplete localizadorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        localizadorCreateInput.setId("localizadorCreateInput");
        localizadorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.localizador}", Localizador.class));
        localizadorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completeLocalizador}", List.class, new Class[] { String.class }));
        localizadorCreateInput.setDropdown(true);
        localizadorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "localizador", String.class));
        localizadorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{localizador.nivel} #{localizador.subLocal}", String.class));
        localizadorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{localizador}", Localizador.class));
        localizadorCreateInput.setConverter(new LocalizadorConverter());
        localizadorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(localizadorCreateInput);
        
        Message localizadorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localizadorCreateInputMessage.setId("localizadorCreateInputMessage");
        localizadorCreateInputMessage.setFor("localizadorCreateInput");
        localizadorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localizadorCreateInputMessage);
        
        HtmlOutputText grupoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoCreateOutput.setId("grupoCreateOutput");
        grupoCreateOutput.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoCreateOutput);
        
        AutoComplete grupoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoCreateInput.setId("grupoCreateInput");
        grupoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.grupo}", PastaGrupo.class));
        grupoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completeGrupo}", List.class, new Class[] { String.class }));
        grupoCreateInput.setDropdown(true);
        grupoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "grupo", String.class));
        grupoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{grupo.descricao}", String.class));
        grupoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{grupo}", PastaGrupo.class));
        grupoCreateInput.setConverter(new PastaGrupoConverter());
        grupoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(grupoCreateInput);
        
        Message grupoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoCreateInputMessage.setId("grupoCreateInputMessage");
        grupoCreateInputMessage.setFor("grupoCreateInput");
        grupoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoCreateInputMessage);
        
        HtmlOutputText pastaMaeCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaMaeCreateOutput.setId("pastaMaeCreateOutput");
        pastaMaeCreateOutput.setValue("Pasta Mae:   ");
        htmlPanelGrid.getChildren().add(pastaMaeCreateOutput);
        
        AutoComplete pastaMaeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pastaMaeCreateInput.setId("pastaMaeCreateInput");
        pastaMaeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaMae}", Pastas.class));
        pastaMaeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completePastaMae}", List.class, new Class[] { String.class }));
        pastaMaeCreateInput.setDropdown(true);
        pastaMaeCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pastaMae", String.class));
        pastaMaeCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pastaMae.descricao}", String.class));
        pastaMaeCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pastaMae}", Pastas.class));
        pastaMaeCreateInput.setConverter(new PastasConverter());
        pastaMaeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaMaeCreateInput);
        
        Message pastaMaeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaMaeCreateInputMessage.setId("pastaMaeCreateInputMessage");
        pastaMaeCreateInputMessage.setFor("pastaMaeCreateInput");
        pastaMaeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaMaeCreateInputMessage);
        
        HtmlOutputText descricaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputTextarea descricaoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.descricao}", String.class));
        LengthValidator descricaoCreateInputValidator = new LengthValidator();
        descricaoCreateInputValidator.setMaximum(70);
        descricaoCreateInput.addValidator(descricaoCreateInputValidator);
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastasController.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentossEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentossEditOutput.setId("documentossEditOutput");
        documentossEditOutput.setValue("Documentoss:   ");
        htmlPanelGrid.getChildren().add(documentossEditOutput);
        
        InputText documentossEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        documentossEditInput.setId("documentossEditInput");
        documentossEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.documentoss}", Set.class));
        documentossEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(documentossEditInput);
        
        Message documentossEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        documentossEditInputMessage.setId("documentossEditInputMessage");
        documentossEditInputMessage.setFor("documentossEditInput");
        documentossEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(documentossEditInputMessage);
        
        HtmlOutputText pastaDetalhesesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesEditOutput.setId("pastaDetalhesesEditOutput");
        pastaDetalhesesEditOutput.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditOutput);
        
        InputText pastaDetalhesesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaDetalhesesEditInput.setId("pastaDetalhesesEditInput");
        pastaDetalhesesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaDetalheses}", Set.class));
        pastaDetalhesesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditInput);
        
        Message pastaDetalhesesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaDetalhesesEditInputMessage.setId("pastaDetalhesesEditInputMessage");
        pastaDetalhesesEditInputMessage.setFor("pastaDetalhesesEditInput");
        pastaDetalhesesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaDetalhesesEditInputMessage);
        
        HtmlOutputText pastaRetiradasEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaRetiradasEditOutput.setId("pastaRetiradasEditOutput");
        pastaRetiradasEditOutput.setValue("Pasta Retiradas:   ");
        htmlPanelGrid.getChildren().add(pastaRetiradasEditOutput);
        
        InputText pastaRetiradasEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastaRetiradasEditInput.setId("pastaRetiradasEditInput");
        pastaRetiradasEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaRetiradas}", Set.class));
        pastaRetiradasEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaRetiradasEditInput);
        
        Message pastaRetiradasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaRetiradasEditInputMessage.setId("pastaRetiradasEditInputMessage");
        pastaRetiradasEditInputMessage.setFor("pastaRetiradasEditInput");
        pastaRetiradasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaRetiradasEditInputMessage);
        
        HtmlOutputText pastassEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassEditOutput.setId("pastassEditOutput");
        pastassEditOutput.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassEditOutput);
        
        HtmlOutputText pastassEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassEditInput.setId("pastassEditInput");
        pastassEditInput.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassEditInput);
        
        Message pastassEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastassEditInputMessage.setId("pastassEditInputMessage");
        pastassEditInputMessage.setFor("pastassEditInput");
        pastassEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastassEditInputMessage);
        
        HtmlOutputText pastasRestricaosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastasRestricaosEditOutput.setId("pastasRestricaosEditOutput");
        pastasRestricaosEditOutput.setValue("Pastas Restricaos:   ");
        htmlPanelGrid.getChildren().add(pastasRestricaosEditOutput);
        
        InputText pastasRestricaosEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        pastasRestricaosEditInput.setId("pastasRestricaosEditInput");
        pastasRestricaosEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastasRestricaos}", Set.class));
        pastasRestricaosEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastasRestricaosEditInput);
        
        Message pastasRestricaosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastasRestricaosEditInputMessage.setId("pastasRestricaosEditInputMessage");
        pastasRestricaosEditInputMessage.setFor("pastasRestricaosEditInput");
        pastasRestricaosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastasRestricaosEditInputMessage);
        
        HtmlOutputText localizadorEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorEditOutput.setId("localizadorEditOutput");
        localizadorEditOutput.setValue("Localizador:   ");
        htmlPanelGrid.getChildren().add(localizadorEditOutput);
        
        AutoComplete localizadorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        localizadorEditInput.setId("localizadorEditInput");
        localizadorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.localizador}", Localizador.class));
        localizadorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completeLocalizador}", List.class, new Class[] { String.class }));
        localizadorEditInput.setDropdown(true);
        localizadorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "localizador", String.class));
        localizadorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{localizador.nivel} #{localizador.subLocal}", String.class));
        localizadorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{localizador}", Localizador.class));
        localizadorEditInput.setConverter(new LocalizadorConverter());
        localizadorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(localizadorEditInput);
        
        Message localizadorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localizadorEditInputMessage.setId("localizadorEditInputMessage");
        localizadorEditInputMessage.setFor("localizadorEditInput");
        localizadorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localizadorEditInputMessage);
        
        HtmlOutputText grupoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoEditOutput.setId("grupoEditOutput");
        grupoEditOutput.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoEditOutput);
        
        AutoComplete grupoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoEditInput.setId("grupoEditInput");
        grupoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.grupo}", PastaGrupo.class));
        grupoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completeGrupo}", List.class, new Class[] { String.class }));
        grupoEditInput.setDropdown(true);
        grupoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "grupo", String.class));
        grupoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{grupo.descricao}", String.class));
        grupoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{grupo}", PastaGrupo.class));
        grupoEditInput.setConverter(new PastaGrupoConverter());
        grupoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(grupoEditInput);
        
        Message grupoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoEditInputMessage.setId("grupoEditInputMessage");
        grupoEditInputMessage.setFor("grupoEditInput");
        grupoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoEditInputMessage);
        
        HtmlOutputText pastaMaeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaMaeEditOutput.setId("pastaMaeEditOutput");
        pastaMaeEditOutput.setValue("Pasta Mae:   ");
        htmlPanelGrid.getChildren().add(pastaMaeEditOutput);
        
        AutoComplete pastaMaeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pastaMaeEditInput.setId("pastaMaeEditInput");
        pastaMaeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaMae}", Pastas.class));
        pastaMaeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pastasController.completePastaMae}", List.class, new Class[] { String.class }));
        pastaMaeEditInput.setDropdown(true);
        pastaMaeEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pastaMae", String.class));
        pastaMaeEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pastaMae.descricao}", String.class));
        pastaMaeEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pastaMae}", Pastas.class));
        pastaMaeEditInput.setConverter(new PastasConverter());
        pastaMaeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pastaMaeEditInput);
        
        Message pastaMaeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pastaMaeEditInputMessage.setId("pastaMaeEditInputMessage");
        pastaMaeEditInputMessage.setFor("pastaMaeEditInput");
        pastaMaeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pastaMaeEditInputMessage);
        
        HtmlOutputText descricaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputTextarea descricaoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.descricao}", String.class));
        LengthValidator descricaoEditInputValidator = new LengthValidator();
        descricaoEditInputValidator.setMaximum(70);
        descricaoEditInput.addValidator(descricaoEditInputValidator);
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PastasController.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText documentossLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentossLabel.setId("documentossLabel");
        documentossLabel.setValue("Documentoss:   ");
        htmlPanelGrid.getChildren().add(documentossLabel);
        
        HtmlOutputText documentossValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        documentossValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.documentoss}", String.class));
        htmlPanelGrid.getChildren().add(documentossValue);
        
        HtmlOutputText pastaDetalhesesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesLabel.setId("pastaDetalhesesLabel");
        pastaDetalhesesLabel.setValue("Pasta Detalheses:   ");
        htmlPanelGrid.getChildren().add(pastaDetalhesesLabel);
        
        HtmlOutputText pastaDetalhesesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaDetalhesesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaDetalheses}", String.class));
        htmlPanelGrid.getChildren().add(pastaDetalhesesValue);
        
        HtmlOutputText pastaRetiradasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaRetiradasLabel.setId("pastaRetiradasLabel");
        pastaRetiradasLabel.setValue("Pasta Retiradas:   ");
        htmlPanelGrid.getChildren().add(pastaRetiradasLabel);
        
        HtmlOutputText pastaRetiradasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaRetiradasValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaRetiradas}", String.class));
        htmlPanelGrid.getChildren().add(pastaRetiradasValue);
        
        HtmlOutputText pastassLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassLabel.setId("pastassLabel");
        pastassLabel.setValue("Pastass:   ");
        htmlPanelGrid.getChildren().add(pastassLabel);
        
        HtmlOutputText pastassValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastassValue.setId("pastassValue");
        pastassValue.setValue("This relationship is managed from the Pastas side");
        htmlPanelGrid.getChildren().add(pastassValue);
        
        HtmlOutputText pastasRestricaosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastasRestricaosLabel.setId("pastasRestricaosLabel");
        pastasRestricaosLabel.setValue("Pastas Restricaos:   ");
        htmlPanelGrid.getChildren().add(pastasRestricaosLabel);
        
        HtmlOutputText pastasRestricaosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastasRestricaosValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastasRestricaos}", String.class));
        htmlPanelGrid.getChildren().add(pastasRestricaosValue);
        
        HtmlOutputText localizadorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorLabel.setId("localizadorLabel");
        localizadorLabel.setValue("Localizador:   ");
        htmlPanelGrid.getChildren().add(localizadorLabel);
        
        HtmlOutputText localizadorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.localizador}", Localizador.class));
        localizadorValue.setConverter(new LocalizadorConverter());
        htmlPanelGrid.getChildren().add(localizadorValue);
        
        HtmlOutputText grupoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoLabel.setId("grupoLabel");
        grupoLabel.setValue("Grupo:   ");
        htmlPanelGrid.getChildren().add(grupoLabel);
        
        HtmlOutputText grupoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.grupo}", PastaGrupo.class));
        grupoValue.setConverter(new PastaGrupoConverter());
        htmlPanelGrid.getChildren().add(grupoValue);
        
        HtmlOutputText pastaMaeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaMaeLabel.setId("pastaMaeLabel");
        pastaMaeLabel.setValue("Pasta Mae:   ");
        htmlPanelGrid.getChildren().add(pastaMaeLabel);
        
        HtmlOutputText pastaMaeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pastaMaeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.pastaMae}", Pastas.class));
        pastaMaeValue.setConverter(new PastasConverter());
        htmlPanelGrid.getChildren().add(pastaMaeValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:   ");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        InputTextarea descricaoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pastasController.pastas.descricao}", String.class));
        descricaoValue.setReadonly(true);
        descricaoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        return htmlPanelGrid;
    }
    
    public Pastas PastasController.getPastas() {
        if (pastas == null) {
            pastas = new Pastas();
        }
        return pastas;
    }
    
    public void PastasController.setPastas(Pastas pastas) {
        this.pastas = pastas;
    }
    
    public List<Pastas> PastasController.getSelectedPastass() {
        return selectedPastass;
    }
    
    public void PastasController.setSelectedPastass(List<Pastas> selectedPastass) {
        if (selectedPastass != null) {
            pastas.setPastass(new HashSet<Pastas>(selectedPastass));
        }
        this.selectedPastass = selectedPastass;
    }
    
    public List<Localizador> PastasController.completeLocalizador(String query) {
        List<Localizador> suggestions = new ArrayList<Localizador>();
        for (Localizador localizador : Localizador.findAllLocalizadors()) {
            String localizadorStr = String.valueOf(localizador.getNivel() +  " "  + localizador.getSubLocal());
            if (localizadorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(localizador);
            }
        }
        return suggestions;
    }
    
    public List<PastaGrupo> PastasController.completeGrupo(String query) {
        List<PastaGrupo> suggestions = new ArrayList<PastaGrupo>();
        for (PastaGrupo pastaGrupo : PastaGrupo.findAllPastaGrupoes()) {
            String pastaGrupoStr = String.valueOf(pastaGrupo.getDescricao());
            if (pastaGrupoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pastaGrupo);
            }
        }
        return suggestions;
    }
    
    public List<Pastas> PastasController.completePastaMae(String query) {
        List<Pastas> suggestions = new ArrayList<Pastas>();
        for (Pastas pastas : Pastas.findAllPastases()) {
            String pastasStr = String.valueOf(pastas.getDescricao());
            if (pastasStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pastas);
            }
        }
        return suggestions;
    }
    
    public String PastasController.onEdit() {
        if (pastas != null && pastas.getPastass() != null) {
            selectedPastass = new ArrayList<Pastas>(pastas.getPastass());
        }
        return null;
    }
    
    public boolean PastasController.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PastasController.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PastasController.displayList() {
        createDialogVisible = false;
        findAllPastases();
        return "pastas";
    }
    
    public String PastasController.displayCreateDialog() {
        pastas = new Pastas();
        createDialogVisible = true;
        return "pastas";
    }
    
    public String PastasController.persist() {
        String message = "";
        if (pastas.getId() != null) {
            pastas.merge();
            message = "Successfully updated";
        } else {
            pastas.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastases();
    }
    
    public String PastasController.delete() {
        pastas.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPastases();
    }
    
    public void PastasController.reset() {
        pastas = null;
        selectedPastass = null;
        createDialogVisible = false;
    }
    
    public void PastasController.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
