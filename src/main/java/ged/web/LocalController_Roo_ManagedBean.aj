// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ged.web;

import ged.domain.documentos.Local;
import ged.domain.documentos.Localizador;
import ged.web.LocalController;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect LocalController_Roo_ManagedBean {
    
    declare @type: LocalController: @ManagedBean(name = "localController");
    
    declare @type: LocalController: @SessionScoped;
    
    private String LocalController.name = "Locals";
    
    private Local LocalController.local;
    
    private List<Local> LocalController.allLocals;
    
    private boolean LocalController.dataVisible = false;
    
    private List<String> LocalController.columns;
    
    private HtmlPanelGrid LocalController.createPanelGrid;
    
    private HtmlPanelGrid LocalController.editPanelGrid;
    
    private HtmlPanelGrid LocalController.viewPanelGrid;
    
    private boolean LocalController.createDialogVisible = false;
    
    private List<Localizador> LocalController.selectedLocalizadors;
    
    @PostConstruct
    public void LocalController.init() {
        columns = new ArrayList<String>();
        columns.add("descricao");
        columns.add("orgao");
    }
    
    public String LocalController.getName() {
        return name;
    }
    
    public List<String> LocalController.getColumns() {
        return columns;
    }
    
    public List<Local> LocalController.getAllLocals() {
        return allLocals;
    }
    
    public void LocalController.setAllLocals(List<Local> allLocals) {
        this.allLocals = allLocals;
    }
    
    public String LocalController.findAllLocals() {
        allLocals = Local.findAllLocals();
        dataVisible = !allLocals.isEmpty();
        return null;
    }
    
    public boolean LocalController.isDataVisible() {
        return dataVisible;
    }
    
    public void LocalController.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid LocalController.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void LocalController.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid LocalController.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void LocalController.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid LocalController.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void LocalController.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid LocalController.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText localizadorsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsCreateOutput.setId("localizadorsCreateOutput");
        localizadorsCreateOutput.setValue("Localizadors:   ");
        htmlPanelGrid.getChildren().add(localizadorsCreateOutput);
        
        HtmlOutputText localizadorsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsCreateInput.setId("localizadorsCreateInput");
        localizadorsCreateInput.setValue("This relationship is managed from the Localizador side");
        htmlPanelGrid.getChildren().add(localizadorsCreateInput);
        
        Message localizadorsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localizadorsCreateInputMessage.setId("localizadorsCreateInputMessage");
        localizadorsCreateInputMessage.setFor("localizadorsCreateInput");
        localizadorsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localizadorsCreateInputMessage);
        
        HtmlOutputText descricaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputText descricaoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.descricao}", String.class));
        LengthValidator descricaoCreateInputValidator = new LengthValidator();
        descricaoCreateInputValidator.setMaximum(20);
        descricaoCreateInput.addValidator(descricaoCreateInputValidator);
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        HtmlOutputText orgaoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orgaoCreateOutput.setId("orgaoCreateOutput");
        orgaoCreateOutput.setValue("Orgao:   ");
        htmlPanelGrid.getChildren().add(orgaoCreateOutput);
        
        Spinner orgaoCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orgaoCreateInput.setId("orgaoCreateInput");
        orgaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.orgao}", Integer.class));
        orgaoCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orgaoCreateInput);
        
        Message orgaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orgaoCreateInputMessage.setId("orgaoCreateInputMessage");
        orgaoCreateInputMessage.setFor("orgaoCreateInput");
        orgaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orgaoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocalController.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText localizadorsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsEditOutput.setId("localizadorsEditOutput");
        localizadorsEditOutput.setValue("Localizadors:   ");
        htmlPanelGrid.getChildren().add(localizadorsEditOutput);
        
        HtmlOutputText localizadorsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsEditInput.setId("localizadorsEditInput");
        localizadorsEditInput.setValue("This relationship is managed from the Localizador side");
        htmlPanelGrid.getChildren().add(localizadorsEditInput);
        
        Message localizadorsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localizadorsEditInputMessage.setId("localizadorsEditInputMessage");
        localizadorsEditInputMessage.setFor("localizadorsEditInput");
        localizadorsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localizadorsEditInputMessage);
        
        HtmlOutputText descricaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao: * ");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputText descricaoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.descricao}", String.class));
        LengthValidator descricaoEditInputValidator = new LengthValidator();
        descricaoEditInputValidator.setMaximum(20);
        descricaoEditInput.addValidator(descricaoEditInputValidator);
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        HtmlOutputText orgaoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orgaoEditOutput.setId("orgaoEditOutput");
        orgaoEditOutput.setValue("Orgao:   ");
        htmlPanelGrid.getChildren().add(orgaoEditOutput);
        
        Spinner orgaoEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        orgaoEditInput.setId("orgaoEditInput");
        orgaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.orgao}", Integer.class));
        orgaoEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(orgaoEditInput);
        
        Message orgaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        orgaoEditInputMessage.setId("orgaoEditInputMessage");
        orgaoEditInputMessage.setFor("orgaoEditInput");
        orgaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(orgaoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocalController.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText localizadorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsLabel.setId("localizadorsLabel");
        localizadorsLabel.setValue("Localizadors:   ");
        htmlPanelGrid.getChildren().add(localizadorsLabel);
        
        HtmlOutputText localizadorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localizadorsValue.setId("localizadorsValue");
        localizadorsValue.setValue("This relationship is managed from the Localizador side");
        htmlPanelGrid.getChildren().add(localizadorsValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:   ");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        HtmlOutputText descricaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.descricao}", String.class));
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        HtmlOutputText orgaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orgaoLabel.setId("orgaoLabel");
        orgaoLabel.setValue("Orgao:   ");
        htmlPanelGrid.getChildren().add(orgaoLabel);
        
        HtmlOutputText orgaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        orgaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localController.local.orgao}", String.class));
        htmlPanelGrid.getChildren().add(orgaoValue);
        
        return htmlPanelGrid;
    }
    
    public Local LocalController.getLocal() {
        if (local == null) {
            local = new Local();
        }
        return local;
    }
    
    public void LocalController.setLocal(Local local) {
        this.local = local;
    }
    
    public List<Localizador> LocalController.getSelectedLocalizadors() {
        return selectedLocalizadors;
    }
    
    public void LocalController.setSelectedLocalizadors(List<Localizador> selectedLocalizadors) {
        if (selectedLocalizadors != null) {
            local.setLocalizadors(new HashSet<Localizador>(selectedLocalizadors));
        }
        this.selectedLocalizadors = selectedLocalizadors;
    }
    
    public String LocalController.onEdit() {
        if (local != null && local.getLocalizadors() != null) {
            selectedLocalizadors = new ArrayList<Localizador>(local.getLocalizadors());
        }
        return null;
    }
    
    public boolean LocalController.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void LocalController.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String LocalController.displayList() {
        createDialogVisible = false;
        findAllLocals();
        return "local";
    }
    
    public String LocalController.displayCreateDialog() {
        local = new Local();
        createDialogVisible = true;
        return "local";
    }
    
    public String LocalController.persist() {
        String message = "";
        if (local.getId() != null) {
            local.merge();
            message = "Successfully updated";
        } else {
            local.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocals();
    }
    
    public String LocalController.delete() {
        local.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocals();
    }
    
    public void LocalController.reset() {
        local = null;
        selectedLocalizadors = null;
        createDialogVisible = false;
    }
    
    public void LocalController.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
